package core

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/iden3/go-iden3-core/testgen"
	"github.com/stretchr/testify/assert"
)

func TestClaimBasic(t *testing.T) {
	// If generateTest is true, the checked values will be used to generate a test vector
	generateTest := true
	// Init test
	err := testgen.InitTest("claimBasic", generateTest)
	if err != nil {
		fmt.Println("error initializing test data:", err)
		return
	}
	// Add input data to the test vector
	if generateTest {
		testgen.SetTestValue("indexSlot", hex.EncodeToString([]byte{
			0x29, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a,
			0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a,
			0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a,
			0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a,
			0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a,
			0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a,
			0x2a, 0x2b}))
		testgen.SetTestValue("dataSlot", hex.EncodeToString([]byte{
			0x56, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
			0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
			0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
			0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
			0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
			0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
			0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
			0x58, 0x58, 0x58, 0x58, 0x58, 0x59}))
	}
	// ClaimBasic
	var indexSlot [400 / 8]byte
	var dataSlot [496 / 8]byte
	indexSlotHex, _ := hex.DecodeString(testgen.GetTestValue("indexSlot").(string))
	dataSlotHex, _ := hex.DecodeString(testgen.GetTestValue("dataSlot").(string))
	copy(indexSlot[:], indexSlotHex[:400/8])
	copy(dataSlot[:], dataSlotHex[:496/8])
	c0 := NewClaimBasic(indexSlot, dataSlot)
	c0.Version = 1
	e := c0.Entry()
	// Check claim against test vector
	checkClaim(e, t)
	dataTestOutput(&e.Data)
	c1 := NewClaimBasicFromEntry(e)
	c2, err := NewClaimFromEntry(e)
	assert.Nil(t, err)
	assert.Equal(t, c0, c1)
	assert.Equal(t, c0, c2)
	// Stop test (write new test vector if needed)
	err = testgen.StopTest()
	if err != nil {
		fmt.Println("Error stopping test:", err)
	}
}
